package com.company;

public class Main {

    public static void main(String[] args) {
	/*
	- разбор домашней работы
    - команда распеатки информации в консоль? Элемент переменная - это?
    - Как правильно создавать переменную?(Какой синтаксис)
    - как по этикету давать названия переменным(CamelCase)
    - инициализация переменной (= знак присваивания)
    - можно ли создать переменную типа данных int а сохранить имя карина к примеру
    - какие типы данных для строковых значений (это не примитив это сложный тип данных)
    - какие примитивные вы запомнили? (int и long чем они отличатся double float char(один символ в ''))
    - boolean (логический тип данных)
    - константа (все заглавными буквами, или разделяем нижним подчеркиванием)
    - условные конструкции что это и для чего (для разветвления в программе)
    - какие условные конструкции запомнили ?
    - как работает классическая условная конструкция if else (ложь и правда в условии)
    - тело или блок кода что это?
    - if else if else if else if else как будет работать

пройдем с вами switch,булеву алгебру, изучим методы
     ------ создаем новый проект -------



if проверяемое условие {
Выполняемый код 1, если условие истинное
} else {
Выполняемый код 2, если условие ложное
 }



Switch используется тогда, когда нужно проверить больше двух или трех условий.
Просто если использовать для этих целей расширенный синтаксис if-else вместе с else-if,
 то будь там больше трех параметров и код превратится в какое-то полотенце непонятно чего)))

	switch проверяемое условие {
	case значение1: код1
	case значение2: код2 ......
	case значениеN:
	break
	default: кодM }

Количество блоков case может быть произвольным, но не стоит этим злоупотреблять. Рекомендуемое число блоков: не больше 10. При достижении этого количества стоит пересмотреть программу.



	 */

        int studentsGrade = 3; //не забываем ставить break

        switch (studentsGrade) {
            case 1:
                System.out.println("Ужасный результат");
                break;
            case 2:
                System.out.println("Ну ты бы хоть постарался");
                break;
            case 3:
                System.out.println("Удовлетворительно, но все же плохо");
                break;
            case 4:
                System.out.println("Можешь и получше");
                break;
            case 5:
                System.out.println("Отлично! Можешь когда хочешь!");
                break;
            default:
                System.out.println("Кажется оценку еще не выставили(");
                break;
        }
/*

когда лучше использовать if или switch
switch лучше использовать только если мы сравниваем переменную на равенство (если больше или меньше это уже if)
он работает не со всеми типами данных - int, string, char
Пример со строковой ппеременной
 */

        String name = "Anie";
        switch (name) {
            case "John":
                System.out.println("Hi, John!");
                break;
            case "Alex":
                System.out.println("Hi, John!");
                break;
            case "Anie":
                System.out.println("Hi, John!");
                break;
            default:
                System.out.println("Hi, unknown!");
                break;
        }

        //----- create new project -----------------
/*
 булева алгебра
 хотим получить деньги с банкомата(в каком условии даст? есть карта и знаю пароль)
 "Банкомат даст мне денег если у меня есть карта И я знаю пароль"
 В программировании можно соединять между собой несколько условий факторов с помощью
 оператов, аналогично союзам в предложении
 */

        int temperature = 15;
        int numberOfStudents = 8;
        boolean isRainy = true;
        // && оператор И (and) - знак апперсант
        if (temperature > 10 && numberOfStudents == 8) {
            // true && true => 1*1 = 1 (TRUE)
            System.out.println("Go outside and have a fun");
        }
        /* банкомат выдаст мне деньги если у меня есть карта с паролем ИЛИ я являюсь инкассатором
        || оператор ИЛИ (OR)
        при операторе ИЛИ достаточно одной истины
        2 -3 - 5-10 условий
        */

        if (temperature < 30 || isRainy) {
            // true || false => 1 + 0 = 1(TRUE)
            System.out.println("Nice weather!");
        }

        // картинка булева алгебра (сложение не десятичных чисел а двоичных то есть бинарных)
        // --рассмотрим более сложный вариант

        if (isRainy || numberOfStudents < 10 && temperature > 0) {
            // true || true && true => 1 + 1 * 1 = 1 (TRUE)
            // false || true && false => 0 + 1 * 0 = 0 (FALSE(isRAiny false and temp < 0))
            System.out.println("Stay at home please!");
        }

        // Всего логических оператов 3, третий ! - оператор отрицаняи читается как НЕ(NOT)
        if (!isRainy) { // isRainy = false
            // !false = true------ !true = false
            System.out.println("На улице идет дождь!");
        }
        System.out.println(isRainy); //изменяется значение в условии, но не само значение
        if (!(numberOfStudents > 5)) {
            //!(true) = false
            System.out.println("Something");
        }
        /*---- перерыв и потом пойдем методы
         ------ new project
         метод - отдельный блок кода, которому мы можем дать название и потом по этому названию вызывать и запускать определенный сценарий.
         то есть мы можем какой то сценарий вынести в отдельный блок кода и далее его вызывать там где нам надо

         ---это законченная последовательность действий (инструкций),
         направленных на решение отдельной задачи----

        сценарий при приготовлении чая

         */
        System.out.println("Завтрак");
         // вызвать метод
        System.out.println("Вскипятить воду");
        System.out.println("Насыпать заварку");
        System.out.println("Залить кипятком");
        System.out.println("Дать настояться");
        System.out.println("Добавить сахар, молоко по вкусу");
        System.out.println("Налить и насладиться чаем");

        System.out.println("ОБЕД");

        System.out.println("Вскипятить воду");
        System.out.println("Насыпать заварку");
        System.out.println("Залить кипятком");
        System.out.println("Дать настояться");
        System.out.println("Добавить сахар, молоко по вкусу");
        System.out.println("Налить и насладиться чаем");

        System.out.println("УЖИН");
        makeTea();
        System.out.println("Вскипятить воду");
        System.out.println("Насыпать заварку");
        System.out.println("Залить кипятком");
        System.out.println("Дать настояться");
        System.out.println("Добавить сахар, молоко по вкусу");
        System.out.println("Налить и насладиться чаем");

    }

        public static void makeTea( ){  // метод
            System.out.println("Вскипятить воду");
            System.out.println("Насыпать заварку");
            System.out.println("Залить кипятком");
            System.out.println("Дать настояться");
            System.out.println("Добавить сахар, молоко по вкусу");
            System.out.println("Налить и насладиться чаем");
        } // в одном месте поменяли везде меняется , где добавлять метод нет разницы,
         // можем добавлять внутри тела файла, внутри теkа другого метода не можем создавать
    //внутри тела другого метод можем вызывать
    // main главный запускаемый метод, у которого зарезервировано название.



    /*---- режим отладки
      жук
      точка прерыва
      как программа пошагово выполняется (ОТЛАЖИВАЕМ ПРОГРАММУ)
       debagger Console

     */

    public static void test(){
        int num = 8 / 2;
        int result = num - 1 * 6;
        System.out.println(result);
        // вызывать в конце приготовления чая
        // точку прерыва перед ужином
    }

    // это были методы без входящих пареметров А теперь методы с параметрами

    public static void addition (int num1, int num2, String word){ //невозвращаемый метод с входящими параметрами
        System.out.println(num1 + num2);
        System.out.println(word);
    } // вызовим в саомм конце метода мэйн
    //один и тот же сценарий с разными сценариями можем
    // этот тип методов называется
    //addition(2,3,"Hello"    ) это агрументы
    //makeTea это невозвращаемый метод без входящих параметров
    //{}тело метода а все что до тела это сигнатура метода(подпись метода грубо говоря)
// в метод make tea добавить аргумент чай string

    //---- возвращаемый метод
    // void - пустота с анг
public static int multiply(int num1, int num2){ // возвращаемый метод с параметрами
        return num1 * num2;
}
/* вызвать в мэйн но это просто цифра и все
что то должны сделать с резултатом метода
 приравнять к инту и распечатать или сразу в сауте вызвать
 с возвращаемыми методами с резултьтатом можем дальше что то делать
 35*3 + 13*10 - 2*14 в мэйне сделать
 */

public static String concat (double digit, String phrase, char symbol){
        return digit + " " + phrase + " " + symbol;
}
/*
в мэйне вызвать в сауте и сразу  и до саута просто
резултат вернется но исчезнет
а в сауте распечатается

----GitHub-----
нужно зарегестрироваться на сайте
впредь архивами, фотографиями итд уже не будем принимать
скину видео сразу попробуйте завтра
попробовать скинуть тестовый проект

commit
push

 */

//jknlkjl


















}
